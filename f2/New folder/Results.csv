,schema,model,question,sqlanswer,rating
0,"    
    CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, auto-incremented
    supplier_name VARCHAR(100) NOT NULL, -- Name of the supplier company or entity
    contact_info VARCHAR(100), -- Contact details (e.g., phone, email) of the supplier
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Date and time when the supplier record was created
);

CREATE TABLE drug_category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each drug category, auto-incremented
    category_name VARCHAR(50) NOT NULL -- Name of the drug category (e.g., Antibiotics, Painkillers)
);

CREATE TABLE drug (
    drug_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each drug, auto-incremented
    category_id INT, -- ID of the category this drug belongs to
    drug_name VARCHAR(100) NOT NULL, -- Name of the drug (e.g., Amoxicillin)
    manufacturer VARCHAR(100), -- Name of the company that produces the drug
    price DECIMAL(10,2), -- Price per unit of the drug
    stock INT -- Current stock quantity of the drug in inventory
);

CREATE TABLE pharmacy (
    pharmacy_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each pharmacy, auto-incremented
    pharmacy_name VARCHAR(100) NOT NULL, -- Name of the pharmacy
    location VARCHAR(100), -- Physical location or address of the pharmacy
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Date and time when the pharmacy record was created
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, auto-incremented
    pharmacy_id INT, -- ID of the pharmacy where the employee works
    first_name VARCHAR(50), -- Employee's first name
    last_name VARCHAR(50), -- Employee's last name
    role VARCHAR(50) -- Employee's job role (e.g., Pharmacist, Cashier)
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, auto-incremented
    pharmacy_id INT, -- ID of the pharmacy where the sale occurred
    employee_id INT, -- ID of the employee who made the sale
    sale_date DATE, -- Date the sale took place
    total_amount DECIMAL(10,2) -- Total monetary amount of the sale
);

CREATE TABLE sale_details (
    sale_detail_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale detail entry, auto-incremented
    sale_id INT, -- ID of the sale this detail belongs to
    drug_id INT, -- ID of the drug sold
    quantity INT, -- Number of units of the drug sold
    subtotal DECIMAL(10,2) -- Total cost for this drug in the sale (quantity * price)
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, auto-incremented
    drug_id INT, -- ID of the drug being tracked
    supplier_id INT, -- ID of the supplier providing the drug
    stock_level INT, -- Current stock level of the drug from this supplier
    last_updated DATE -- Date when the stock level was last updated
);

CREATE TABLE prescription (
    prescription_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each prescription, auto-incremented
    sale_id INT, -- ID of the sale associated with this prescription
    doctor_name VARCHAR(100), -- Name of the doctor who issued the prescription
    prescription_date DATE -- Date the prescription was issued
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, auto-incremented
    pharmacy_id INT, -- ID of the pharmacy receiving the feedback
    rating INT CHECK (rating >= 1 AND rating <= 5), -- Customer rating (1 to 5 stars)
    comments TEXT, -- Customer comments or notes
    feedback_date DATE -- Date the feedback was submitted
);",llama3.2:3b,"[""Design a query to identify the top 5 pharmacies with the highest total revenue generated from sales of antibiotics (drugs belonging to the 'Antibiotics' category) during the last quarter (past 90 days). The query should rank pharmacies based on the sum of the `subtotal` values from the `sale_details` table, joining relevant tables to link sales to drug categories and then to pharmacy information.  Include the pharmacy name, total revenue, and the number of sales contributing to that revenue.\n""]","SELECT T2.pharmacy_name, SUM(T3.subtotal) AS total_revenue, COUNT(T3.sale_detail_id) FROM drug_category AS T1 JOIN drug AS T2 ON T1.category_id = T2.category_id JOIN sale_details AS T3 ON T2.drug_id = T3.drug_id JOIN sales AS T4 ON T3.sale_id = T4.sale_id WHERE T1.category_name = 'Antibiotics' AND T4.sale_date BETWEEN CURRENT_DATE - INTERVAL 90 DAY AND CURRENT_DATE GROUP BY T2.pharmacy_name ORDER BY total_revenue DESC LIMIT 5;",8
1,"CREATE TABLE store (
    store_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each store, automatically incremented
    store_name VARCHAR(50) NOT NULL, -- Name of the store
    location VARCHAR(100) -- Physical location or address of the store
);

CREATE TABLE department (
    department_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each department, automatically incremented
    department_name VARCHAR(50) NOT NULL -- Name of the department (e.g., Electronics, Clothing)
);

CREATE TABLE category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product category, automatically incremented
    category_name VARCHAR(50) NOT NULL -- Name of the product category (e.g., TVs, Shirts)
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    category_id INT, -- ID of the category this product belongs to
    product_name VARCHAR(100), -- Name of the product (e.g., ""LED TV 55-inch"")
    price DECIMAL(10,2), -- Price per unit of the product
    FOREIGN KEY (category_id) REFERENCES category(category_id) -- Links to category table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    store_id INT, -- ID of the store where the employee works
    department_id INT, -- ID of the department the employee is assigned to
    first_name VARCHAR(50), -- Employee's first name
    last_name VARCHAR(50), -- Employee's last name
    FOREIGN KEY (store_id) REFERENCES store(store_id), -- Links to store table
    FOREIGN KEY (department_id) REFERENCES department(department_id) -- Links to department table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    email VARCHAR(100) -- Customer's email address
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    store_id INT, -- ID of the store where the sale occurred
    employee_id INT, -- ID of the employee who processed the sale
    customer_id INT, -- ID of the customer who made the purchase
    sale_date DATETIME, -- Date and time when the sale took place
    total_amount DECIMAL(10,2), -- Total monetary amount of the sale
    FOREIGN KEY (store_id) REFERENCES store(store_id), -- Links to store table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id), -- Links to employee table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);

CREATE TABLE sale_items (
    sale_item_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale item, automatically incremented
    sale_id INT, -- ID of the sale this item belongs to
    product_id INT, -- ID of the product sold
    quantity INT, -- Number of units of the product sold
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific product in the sale
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id), -- Links to sales table
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE stock (
    stock_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each stock record, automatically incremented
    product_id INT, -- ID of the product being tracked
    store_id INT, -- ID of the store holding this stock
    quantity INT, -- Current stock quantity of the product at the store
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (store_id) REFERENCES store(store_id) -- Links to store table
);






-- product.category_id can be joined with category.category_id -- Connects each product to its category.
-- employee.store_id can be joined with store.store_id -- Associates employees with the store they work at.
-- employee.department_id can be joined with department.department_id -- Links employees to their assigned department.
-- sales.store_id can be joined with store.store_id -- Ties sales to the store where they occurred.
-- sales.employee_id can be joined with employee.employee_id -- Connects sales to the employee who processed them.
-- sales.customer_id can be joined with customer.customer_id -- Links sales to the customer who made the purchase.
-- sale_items.sale_id can be joined with sales.sale_id -- Associates sale items with their corresponding sale.
-- sale_items.product_id can be joined with product.product_id -- Connects sale items to the specific product sold.
-- stock.product_id can be joined with product.product_id -- Ties stock records to the products they track.
-- stock.store_id can be joined with store.store_id -- Links stock records to the store holding the inventory.",llama3.2:3b,"['   Develop a SQL query to identify the top 5 product categories by total revenue generated across all sales. The query should calculate the total revenue for each category based on the `sale_items` table, joining it with the `sales` and `product` tables. The result should display the category name and the total revenue, sorted in descending order of revenue. Include appropriate aliases for clarity and efficiency.  \n']","SELECT T3.category_name, SUM(T4.subtotal) AS total_revenue 
FROM sales AS T1 
JOIN employee AS T2 ON T1.employee_id = T2.employee_id 
JOIN store AS T3 ON T2.store_id = T3.store_id 
LEFT JOIN sale_items AS T4 ON T1.sale_id = T4.sale_id 
GROUP BY T3.category_name 
ORDER BY total_revenue DESC 
LIMIT 5;",7
2,"CREATE TABLE user (
    user_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each user, automatically incremented
    username VARCHAR(50) UNIQUE, -- Unique username chosen by the user
    email VARCHAR(100), -- User's email address
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Date and time when the user account was created
);

CREATE TABLE category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product category, automatically incremented
    category_name VARCHAR(50) -- Name of the product category (e.g., Electronics, Clothing)
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    category_id INT, -- ID of the category this product belongs to
    product_name VARCHAR(100), -- Name of the product (e.g., ""Wireless Mouse"")
    price DECIMAL(10,2), -- Price per unit of the product
    stock INT -- Current stock quantity of the product
    FOREIGN KEY (category_id) REFERENCES category(category_id) -- Links to category table
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    user_id INT, -- ID of the user who placed the order
    order_date DATETIME, -- Date and time when the order was placed
    status ENUM('PENDING', 'SHIPPED', 'DELIVERED'), -- Current status of the order
    total_amount DECIMAL(10,2), -- Total monetary amount of the order
    FOREIGN KEY (user_id) REFERENCES user(user_id) -- Links to user table
);

CREATE TABLE order_item (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order item, automatically incremented
    order_id INT, -- ID of the order this item belongs to
    product_id INT, -- ID of the product ordered
    quantity INT, -- Number of units of the product ordered
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific product in the order
    FOREIGN KEY (order_id) REFERENCES order_(order_id), -- Links to order_ table
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE payment (
    payment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each payment, automatically incremented
    order_id INT, -- ID of the order associated with this payment
    amount DECIMAL(10,2), -- Amount paid for the order
    payment_date DATETIME, -- Date and time when the payment was made
    method ENUM('CARD', 'PAYPAL', 'COD'), -- Payment method used (Credit Card, PayPal, Cash on Delivery)
    FOREIGN KEY (order_id) REFERENCES order_(order_id) -- Links to order_ table
);

CREATE TABLE shipping (
    shipping_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each shipping record, automatically incremented
    order_id INT, -- ID of the order being shipped
    shipping_date DATE, -- Date when the order was shipped
    tracking_number VARCHAR(50), -- Tracking number for the shipment
    FOREIGN KEY (order_id) REFERENCES order_(order_id) -- Links to order_ table
);

CREATE TABLE review (
    review_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each review, automatically incremented
    product_id INT, -- ID of the product being reviewed
    user_id INT, -- ID of the user who wrote the review
    rating INT, -- Rating given by the user (e.g., 1 to 5)
    comment TEXT, -- Text comment or feedback about the product
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (user_id) REFERENCES user(user_id) -- Links to user table
);



-- product.category_id can be joined with category.category_id -- Connects each product to its category.
-- order_.user_id can be joined with user.user_id -- Ties orders to the user who placed them.
-- order_item.order_id can be joined with order_.order_id -- Links order items to their corresponding order.
-- order_item.product_id can be joined with product.product_id -- Connects order items to the specific product ordered.
-- payment.order_id can be joined with order_.order_id -- Associates payments with the order they cover.
-- shipping.order_id can be joined with order_.order_id -- Links shipping records to the order being shipped.
-- review.product_id can be joined with product.product_id -- Ties reviews to the product being reviewed.
-- review.user_id can be joined with user.user_id -- Connects reviews to the user who wrote them.",llama3.2:3b,"['Generate a SQL query to determine the average order value for each product category, including the category name and the average total amount of all orders containing products from that category.  Present the results sorted in descending order of the average order value. Use appropriate aliases to enhance readability.\n']","SELECT T1.category_name, AVG(T2.total_amount) AS avg_total_amount FROM category AS T1 JOIN order_ AS T2 ON T2.user_id = T1.category_id GROUP BY T1.category_name ORDER BY AVG(T2.total_amount) DESC;",2
3,"CREATE TABLE agent (
    agent_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each agent, automatically incremented
    first_name VARCHAR(50), -- Agent's first name
    last_name VARCHAR(50), -- Agent's last name
    phone VARCHAR(20) -- Agent's phone number
);

CREATE TABLE property_type (
    type_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each property type, automatically incremented
    type_name VARCHAR(50) NOT NULL -- Name of the property type (e.g., House, Apartment)
);

CREATE TABLE property (
    property_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each property, automatically incremented
    type_id INT, -- ID of the property type this property belongs to
    address TEXT, -- Full address of the property
    price DECIMAL(12,2), -- Listed price of the property
    status ENUM('AVAILABLE', 'SOLD', 'PENDING'), -- Current status of the property
    FOREIGN KEY (type_id) REFERENCES property_type(type_id) -- Links to property_type table
);

CREATE TABLE client (
    client_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each client, automatically incremented
    first_name VARCHAR(50), -- Client's first name
    last_name VARCHAR(50), -- Client's last name
    email VARCHAR(100) -- Client's email address
);

CREATE TABLE sale (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    property_id INT, -- ID of the property sold
    agent_id INT, -- ID of the agent who facilitated the sale
    client_id INT, -- ID of the client who purchased the property
    sale_date DATE, -- Date when the sale was completed
    sale_price DECIMAL(12,2), -- Final sale price of the property
    FOREIGN KEY (property_id) REFERENCES property(property_id), -- Links to property table
    FOREIGN KEY (agent_id) REFERENCES agent(agent_id), -- Links to agent table
    FOREIGN KEY (client_id) REFERENCES client(client_id) -- Links to client table
);

CREATE TABLE commission (
    commission_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each commission record, automatically incremented
    sale_id INT, -- ID of the sale this commission is tied to
    agent_id INT, -- ID of the agent receiving the commission
    amount DECIMAL(10,2), -- Commission amount earned by the agent
    FOREIGN KEY (sale_id) REFERENCES sale(sale_id), -- Links to sale table
    FOREIGN KEY (agent_id) REFERENCES agent(agent_id) -- Links to agent table
);

CREATE TABLE appointment (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each appointment, automatically incremented
    agent_id INT, -- ID of the agent conducting the appointment
    client_id INT, -- ID of the client attending the appointment
    property_id INT, -- ID of the property being shown or discussed
    appointment_date DATETIME, -- Date and time of the appointment
    FOREIGN KEY (agent_id) REFERENCES agent(agent_id), -- Links to agent table
    FOREIGN KEY (client_id) REFERENCES client(client_id), -- Links to client table
    FOREIGN KEY (property_id) REFERENCES property(property_id) -- Links to property table
);

CREATE TABLE expense (
    expense_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each expense record, automatically incremented
    property_id INT, -- ID of the property associated with the expense
    amount DECIMAL(10,2), -- Amount of the expense
    description TEXT, -- Details or reason for the expense (e.g., repairs, marketing)
    expense_date DATE, -- Date when the expense was incurred
    FOREIGN KEY (property_id) REFERENCES property(property_id) -- Links to property table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    client_id INT, -- ID of the client providing the feedback
    rating INT, -- Rating given by the client (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the client
    FOREIGN KEY (client_id) REFERENCES client(client_id) -- Links to client table
);


-- property.type_id can be joined with property_type.type_id -- Connects each property to its type.
-- sale.property_id can be joined with property.property_id -- Ties sales to the property sold.
-- sale.agent_id can be joined with agent.agent_id -- Links sales to the agent who facilitated them.
-- sale.client_id can be joined with client.client_id -- Connects sales to the client who purchased the property.
-- commission.sale_id can be joined with sale.sale_id -- Associates commissions with their corresponding sale.
-- commission.agent_id can be joined with agent.agent_id -- Links commissions to the agent receiving them.
-- appointment.agent_id can be joined with agent.agent_id -- Ties appointments to the agent conducting them.
-- appointment.client_id can be joined with client.client_id -- Connects appointments to the client attending them.
-- appointment.property_id can be joined with property.property_id -- Links appointments to the property being shown.
-- expense.property_id can be joined with property.property_id -- Associates expenses with the property they relate to.
-- feedback.client_id can be joined with client.client_id -- Connects feedback to the client providing it.",llama3.2:3b,"['  \n   Generate a SQL query to identify all agents who have facilitated sales to clients whose feedback ratings are consistently above 4, and determine the average sale price for properties sold by these agents. Return the agent\'s first name, last name, and the average sale price, sorted in descending order of the average sale price.  Assume that ""consistent"" means at least 3 feedback entries with a rating above 4.\n']"," SELECT T1.first_name, T1.last_name, AVG(T3.sale_price) AS avg_sale_price FROM agent AS T1 INNER JOIN sale AS T2 ON T1.agent_id = T2.agent_id INNER JOIN client AS T3 ON T3.client_id = T2.client_id WHERE T3.rating >= 4 GROUP BY T1.first_name, T1.last_name HAVING COUNT(T3.rating) >= 3 ORDER BY AVG(T3.sale_price) DESC;",7
4,"CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, automatically incremented
    supplier_name VARCHAR(100), -- Name of the supplier company or entity
    contact VARCHAR(100) -- Contact information for the supplier (e.g., phone, email)
);

CREATE TABLE raw_material (
    material_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each raw material, automatically incremented
    material_name VARCHAR(100), -- Name of the raw material (e.g., Steel, Cotton)
    unit_cost DECIMAL(10,2) -- Cost per unit of the raw material
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    product_name VARCHAR(100), -- Name of the product (e.g., ""Steel Table"")
    sale_price DECIMAL(10,2) -- Price at which the product is sold per unit
);

CREATE TABLE production (
    production_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each production batch, automatically incremented
    product_id INT, -- ID of the product being produced
    production_date DATE, -- Date when the production occurred
    quantity INT, -- Number of units produced in this batch
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    role VARCHAR(50) -- Employee's job role (e.g., Salesperson, Production Worker)
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    product_id INT, -- ID of the product sold
    employee_id INT, -- ID of the employee who made the sale
    sale_date DATE, -- Date when the sale took place
    quantity_sold INT, -- Number of units sold
    total_amount DECIMAL(10,2), -- Total monetary amount of the sale
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, automatically incremented
    material_id INT, -- ID of the raw material being tracked
    stock_level INT, -- Current stock quantity of the raw material
    FOREIGN KEY (material_id) REFERENCES raw_material(material_id) -- Links to raw_material table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    company_name VARCHAR(100), -- Name of the customer company or entity
    contact VARCHAR(100) -- Contact information for the customer (e.g., phone, email)
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    customer_id INT, -- ID of the customer who placed the order
    sale_id INT, -- ID of the sale associated with this order
    order_date DATE, -- Date when the order was placed
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id) -- Links to sales table
);


-- production.product_id can be joined with product.product_id -- Connects production batches to the product being produced.
-- sales.product_id can be joined with product.product_id -- Ties sales to the product sold.
-- sales.employee_id can be joined with employee.employee_id -- Links sales to the employee who made them.
-- inventory.material_id can be joined with raw_material.material_id -- Associates inventory records with the raw materials they track.
-- order_.customer_id can be joined with customer.customer_id -- Connects orders to the customer who placed them.
-- order_.sale_id can be joined with sales.sale_id -- Links orders to their corresponding sale.",llama3.2:3b,"['Design a SQL query to identify the top 3 product categories (defined by product names) that have experienced the highest total sales revenue over the last 12 months, considering both the sale price and the quantity sold.  Your query must utilize multiple joins and aliases to efficiently retrieve this information.  The query should rank products based on total revenue, and return the product names and their corresponding total revenue for the top 3.  Assume the current date is used for filtering sales data within the last 12 months.\n']","SELECT T1.product_name, SUM(T3.total_amount * T2.quantity) AS total_revenue 
FROM product AS T1 
JOIN production AS T2 ON T1.product_id = T2.product_id 
JOIN sales AS T3 ON T2.production_id = T3.sale_id 
GROUP BY T1.product_name 
ORDER BY total_revenue DESC 
LIMIT 3;",7
5,"CREATE TABLE restaurant (
    restaurant_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each restaurant, automatically incremented
    name VARCHAR(100), -- Name of the restaurant
    location VARCHAR(100) -- Physical location or address of the restaurant
);

CREATE TABLE menu_category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each menu category, automatically incremented
    category_name VARCHAR(50) -- Name of the menu category (e.g., Appetizers, Desserts)
);

CREATE TABLE menu_item (
    item_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each menu item, automatically incremented
    category_id INT, -- ID of the category this menu item belongs to
    item_name VARCHAR(100), -- Name of the menu item (e.g., ""Chicken Wings"")
    price DECIMAL(10,2), -- Price of the menu item
    FOREIGN KEY (category_id) REFERENCES menu_category(category_id) -- Links to menu_category table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    restaurant_id INT, -- ID of the restaurant where the employee works
    first_name VARCHAR(50), -- Employee's first name
    role VARCHAR(50) -- Employee's job role (e.g., Waiter, Chef)
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(restaurant_id) -- Links to restaurant table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    email VARCHAR(100) -- Customer's email address
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    restaurant_id INT, -- ID of the restaurant where the order was placed
    employee_id INT, -- ID of the employee who processed the order
    customer_id INT, -- ID of the customer who placed the order
    order_date DATETIME, -- Date and time when the order was placed
    total_amount DECIMAL(10,2), -- Total monetary amount of the order
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(restaurant_id), -- Links to restaurant table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id), -- Links to employee table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);

CREATE TABLE order_detail (
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order detail, automatically incremented
    order_id INT, -- ID of the order this detail belongs to
    item_id INT, -- ID of the menu item ordered
    quantity INT, -- Number of units of the menu item ordered
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific menu item in the order
    FOREIGN KEY (order_id) REFERENCES order_(order_id), -- Links to order_ table
    FOREIGN KEY (item_id) REFERENCES menu_item(item_id) -- Links to menu_item table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    customer_id INT, -- ID of the customer providing the feedback
    restaurant_id INT, -- ID of the restaurant being reviewed
    rating INT, -- Rating given by the customer (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(restaurant_id) -- Links to restaurant table
);


-- menu_item.category_id can be joined with menu_category.category_id -- Connects each menu item to its category.
-- employee.restaurant_id can be joined with restaurant.restaurant_id -- Ties employees to the restaurant they work at.
-- order_.restaurant_id can be joined with restaurant.restaurant_id -- Links orders to the restaurant where they were placed.
-- order_.employee_id can be joined with employee.employee_id -- Connects orders to the employee who processed them.
-- order_.customer_id can be joined with customer.customer_id -- Associates orders with the customer who placed them.
-- order_detail.order_id can be joined with order_.order_id -- Ties order details to their corresponding order.
-- order_detail.item_id can be joined with menu_item.item_id -- Links order details to the specific menu item ordered.
-- feedback.customer_id can be joined with customer.customer_id -- Connects feedback to the customer providing it.
-- feedback.restaurant_id can be joined with restaurant.restaurant_id -- Associates feedback with the restaurant being reviewed.",llama3.2:3b,"['  Develop a SQL query to identify all restaurants that have received at least five negative feedback entries (rating of 1 or 2) within the last 30 days. Your query must utilize joins between the `feedback` and `restaurant` tables, along with appropriate filtering and aggregation.  Include aliases for all tables used in your query.\n']","SELECT r.name, COUNT(o.order_id) as total_negatives FROM restaurant r JOIN order_ o ON r.restaurant_id = o.restaurant_id JOIN employee e ON r.restaurant_id = e.restaurant_id JOIN customer c ON o.customer_id = c.customer_id JOIN feedback f ON c.customer_id = f.customer_id WHERE f.rating IN (1, 2) AND TIMESTAMPDIFF(DAY, f.order_date, CURDATE()) <= 30 GROUP BY r.name HAVING COUNT(f.feedback_id) >= 5;",3
6,"CREATE TABLE vehicle_type (
    type_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each vehicle type, automatically incremented
    type_name VARCHAR(50) -- Name of the vehicle type (e.g., Sedan, Truck)
);

CREATE TABLE vehicle (
    vehicle_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each vehicle, automatically incremented
    type_id INT, -- ID of the vehicle type this vehicle belongs to
    model VARCHAR(100), -- Model name of the vehicle (e.g., ""Camry"")
    manufacturer VARCHAR(50), -- Name of the vehicle manufacturer (e.g., ""Toyota"")
    price DECIMAL(12,2), -- Price of the vehicle
    stock INT, -- Current stock quantity of the vehicle
    FOREIGN KEY (type_id) REFERENCES vehicle_type(type_id) -- Links to vehicle_type table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    last_name VARCHAR(50), -- Customer's last name
    email VARCHAR(100) -- Customer's email address
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    last_name VARCHAR(50), -- Employee's last name
    role VARCHAR(50) -- Employee's job role (e.g., Salesperson, Mechanic)
);

CREATE TABLE sale (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    vehicle_id INT, -- ID of the vehicle sold
    customer_id INT, -- ID of the customer who purchased the vehicle
    employee_id INT, -- ID of the employee who facilitated the sale
    sale_date DATE, -- Date when the sale occurred
    sale_price DECIMAL(12,2), -- Final sale price of the vehicle
    FOREIGN KEY (vehicle_id) REFERENCES vehicle(vehicle_id), -- Links to vehicle table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE service (
    service_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each service record, automatically incremented
    vehicle_id INT, -- ID of the vehicle being serviced
    customer_id INT, -- ID of the customer requesting the service
    service_date DATE, -- Date when the service was performed
    cost DECIMAL(10,2), -- Cost of the service
    FOREIGN KEY (vehicle_id) REFERENCES vehicle(vehicle_id), -- Links to vehicle table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);

CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, automatically incremented
    supplier_name VARCHAR(100), -- Name of the supplier company or entity
    contact VARCHAR(100) -- Contact information for the supplier (e.g., phone, email)
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, automatically incremented
    vehicle_id INT, -- ID of the vehicle being tracked
    supplier_id INT, -- ID of the supplier providing the vehicle
    stock_level INT, -- Current stock level of the vehicle
    FOREIGN KEY (vehicle_id) REFERENCES vehicle(vehicle_id), -- Links to vehicle table
    FOREIGN KEY (supplier_id) REFERENCES supplier(supplier_id) -- Links to supplier table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    customer_id INT, -- ID of the customer providing the feedback
    rating INT, -- Rating given by the customer (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);




-- vehicle.type_id can be joined with vehicle_type.type_id -- Connects each vehicle to its type.
-- sale.vehicle_id can be joined with vehicle.vehicle_id -- Ties sales to the vehicle sold.
-- sale.customer_id can be joined with customer.customer_id -- Links sales to the customer who purchased the vehicle.
-- sale.employee_id can be joined with employee.employee_id -- Associates sales with the employee who facilitated them.
-- service.vehicle_id can be joined with vehicle.vehicle_id -- Connects service records to the vehicle being serviced.
-- service.customer_id can be joined with customer.customer_id -- Links service records to the customer requesting them.
-- inventory.vehicle_id can be joined with vehicle.vehicle_id -- Ties inventory records to the vehicle being tracked.
-- inventory.supplier_id can be joined with supplier.supplier_id -- Associates inventory with the supplier providing the vehicle.
-- feedback.customer_id can be joined with customer.customer_id -- Connects feedback to the customer providing it.-- ",llama3.2:3b,"[""  \n   Develop a SQL query to identify all customers who have purchased vehicles of a specific type (e.g., 'Sedan') and have subsequently received at least one service for that same vehicle. Return the customer's first name, last name, and the total number of services they have received for vehicles of that type.  Use appropriate aliases to enhance readability and ensure the query accurately reflects the desired outcome.  The query should include a `GROUP BY` clause to aggregate the service counts.\n""]","SELECT 
    C.first_name,
    C.last_name,
    COUNT(DISTINCT S.service_date) AS total_services
FROM 
    sale S
JOIN 
    vehicle V ON S.vehicle_id = V.vehicle_id
JOIN 
    customer C ON S.customer_id = C.customer_id
WHERE 
    V.type_name = 'Sedan'
GROUP BY 
    C.first_name, C.last_name",6
7,"CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    email VARCHAR(100) UNIQUE -- Customer's unique email address
);

CREATE TABLE plan (
    plan_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each subscription plan, automatically incremented
    plan_name VARCHAR(50), -- Name of the plan (e.g., ""Basic"", ""Premium"")
    monthly_price DECIMAL(10,2) -- Monthly cost of the plan
);

CREATE TABLE subscription (
    subscription_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each subscription, automatically incremented
    customer_id INT, -- ID of the customer who subscribed
    plan_id INT, -- ID of the plan subscribed to
    start_date DATE, -- Date when the subscription began
    end_date DATE, -- Date when the subscription ends (if applicable)
    status ENUM('ACTIVE', 'CANCELLED'), -- Current status of the subscription
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (plan_id) REFERENCES plan(plan_id) -- Links to plan table
);

CREATE TABLE payment (
    payment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each payment, automatically incremented
    subscription_id INT, -- ID of the subscription this payment is for
    amount DECIMAL(10,2), -- Amount paid
    payment_date DATE, -- Date when the payment was made
    method ENUM('CARD', 'PAYPAL', 'BANK'), -- Payment method used (Credit Card, PayPal, Bank Transfer)
    FOREIGN KEY (subscription_id) REFERENCES subscription(subscription_id) -- Links to subscription table
);

CREATE TABLE usage (
    usage_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each usage record, automatically incremented
    subscription_id INT, -- ID of the subscription this usage pertains to
    usage_date DATE, -- Date when the usage was recorded
    metric_value INT, -- Measured value of usage (e.g., data in MB, minutes used)
    FOREIGN KEY (subscription_id) REFERENCES subscription(subscription_id) -- Links to subscription table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    role VARCHAR(50) -- Employee's job role (e.g., Support Agent, Manager)
);

CREATE TABLE support_ticket (
    ticket_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each support ticket, automatically incremented
    customer_id INT, -- ID of the customer who raised the ticket
    employee_id INT, -- ID of the employee handling the ticket
    issue TEXT, -- Description of the customer's issue
    status ENUM('OPEN', 'CLOSED'), -- Current status of the ticket
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    customer_id INT, -- ID of the customer providing the feedback
    rating INT, -- Rating given by the customer (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);



-- subscription.customer_id can be joined with customer.customer_id -- Connects subscriptions to the customer who subscribed.
-- subscription.plan_id can be joined with plan.plan_id -- Links subscriptions to the specific plan subscribed to.
-- payment.subscription_id can be joined with subscription.subscription_id -- Ties payments to their corresponding subscription.
-- usage.subscription_id can be joined with subscription.subscription_id -- Associates usage records with the subscription they pertain to.
-- support_ticket.customer_id can be joined with customer.customer_id -- Links support tickets to the customer who raised them.
-- support_ticket.employee_id can be joined with employee.employee_id -- Connects support tickets to the employee handling them.
-- feedback.customer_id can be joined with customer.customer_id -- Ties feedback to the customer providing it.-- ",llama3.2:3b,"['  \n   Develop a SQL query to identify the top 5 customers who have both subscribed to a ""Premium"" plan and have at least one open support ticket. Your query must utilize multiple joins and aliases to effectively combine data from the `customer`, `subscription`, `support_ticket`, and `plan` tables.  The result set should display the customer\'s first name, email, and the number of open support tickets they have.  Ensure the query returns only the top 5 customers based on the total number of open support tickets.\n']","SELECT 
    c.first_name,
    c.email,
    COUNT(t.ticket_id) AS open_tickets
FROM 
    customer c 
JOIN 
    subscription s ON c.customer_id = s.customer_id 
JOIN 
    plan p ON s.plan_id = p.plan_id 
JOIN 
    support_ticket t ON s.customer_id = t.customer_id AND t.status = 'OPEN' 
GROUP BY 
    c.first_name, c.email 
ORDER BY 
    open_tickets DESC LIMIT 5",8
8,"CREATE TABLE warehouse (
    warehouse_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each warehouse, automatically incremented
    location VARCHAR(100), -- Physical location or address of the warehouse
    capacity INT -- Maximum storage capacity of the warehouse (e.g., in units or volume)
);

CREATE TABLE product_category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product category, automatically incremented
    category_name VARCHAR(50) -- Name of the product category (e.g., Electronics, Furniture)
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    category_id INT, -- ID of the category this product belongs to
    product_name VARCHAR(100), -- Name of the product (e.g., ""LED TV"")
    wholesale_price DECIMAL(10,2), -- Wholesale price per unit of the product
    FOREIGN KEY (category_id) REFERENCES product_category(category_id) -- Links to product_category table
);

CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, automatically incremented
    supplier_name VARCHAR(100), -- Name of the supplier company or entity
    contact VARCHAR(100) -- Contact information for the supplier (e.g., phone, email)
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    company_name VARCHAR(100), -- Name of the customer company or entity
    contact VARCHAR(100) -- Contact information for the customer (e.g., phone, email)
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    warehouse_id INT, -- ID of the warehouse where the employee works
    role VARCHAR(50), -- Employee's job role (e.g., Warehouse Manager, Order Picker)
    FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id) -- Links to warehouse table
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    customer_id INT, -- ID of the customer who placed the order
    warehouse_id INT, -- ID of the warehouse fulfilling the order
    employee_id INT, -- ID of the employee who processed the order
    order_date DATE, -- Date when the order was placed
    total_amount DECIMAL(10,2), -- Total monetary amount of the order
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id), -- Links to warehouse table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE order_detail (
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order detail, automatically incremented
    order_id INT, -- ID of the order this detail belongs to
    product_id INT, -- ID of the product ordered
    quantity INT, -- Number of units of the product ordered
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific product in the order
    FOREIGN KEY (order_id) REFERENCES order_(order_id), -- Links to order_ table
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, automatically incremented
    product_id INT, -- ID of the product being tracked
    warehouse_id INT, -- ID of the warehouse storing the product
    supplier_id INT, -- ID of the supplier providing the product
    stock_level INT, -- Current stock quantity of the product in the warehouse
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id), -- Links to warehouse table
    FOREIGN KEY (supplier_id) REFERENCES supplier(supplier_id) -- Links to supplier table
);

CREATE TABLE shipment (
    shipment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each shipment, automatically incremented
    order_id INT, -- ID of the order being shipped
    shipment_date DATE, -- Date when the shipment was sent
    tracking_number VARCHAR(50), -- Tracking number for the shipment
    FOREIGN KEY (order_id) REFERENCES order_(order_id) -- Links to order_ table
);




-- product.category_id can be joined with product_category.category_id -- Connects each product to its category.
-- employee.warehouse_id can be joined with warehouse.warehouse_id -- Ties employees to the warehouse they work at.
-- order_.customer_id can be joined with customer.customer_id -- Links orders to the customer who placed them.
-- order_.warehouse_id can be joined with warehouse.warehouse_id -- Associates orders with the warehouse fulfilling them.
-- order_.employee_id can be joined with employee.employee_id -- Connects orders to the employee who processed them.
-- order_detail.order_id can be joined with order_.order_id -- Ties order details to their corresponding order.
-- order_detail.product_id can be joined with product.product_id -- Links order details to the specific product ordered.
-- inventory.product_id can be joined with product.product_id -- Associates inventory records with the product being tracked.
-- inventory.warehouse_id can be joined with warehouse.warehouse_id -- Connects inventory to the warehouse storing it.
-- inventory.supplier_id can be joined with supplier.supplier_id -- Links inventory to the supplier providing the product.
-- shipment.order_id can be joined with order_.order_id -- Ties shipments to the order being shipped.-- ",llama3.2:3b,"[""  Develop a SQL query to identify all products that have been ordered more than 5 times and are currently stocked in warehouses located in 'New York'. Return the product names and the total quantity ordered for each product.  Include the warehouse location for each product's stock.  Utilize appropriate joins and aliases to efficiently retrieve the required information.\n""]"," SELECT p.product_name, SUM(i.stock_level) AS total_quantity_ordered , w.location FROM inventory i JOIN product p ON i.product_id = p.product_id JOIN warehouse w ON i.warehouse_id = w.warehouse_id WHERE i.stock_level > 0 AND w.location = 'New York' GROUP BY p.product_name",3
9,"    CREATE TABLE products (
    product_id INTEGER PRIMARY KEY, -- Unique ID for each product
    name VARCHAR(50), -- Name of the product
    price DECIMAL(10,2), -- Price of each unit of the product
    quantity INTEGER  -- Current quantity in stock
    );

    CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY, -- Unique ID for each customer
    name VARCHAR(50), -- Name of the customer
    address VARCHAR(100) -- Mailing address of the customer
    );

    CREATE TABLE salespeople (
    salesperson_id INTEGER PRIMARY KEY, -- Unique ID for each salesperson
    name VARCHAR(50), -- Name of the salesperson
    region VARCHAR(50) -- Geographic sales region
    );

    CREATE TABLE sales (
    sale_id INTEGER PRIMARY KEY, -- Unique ID for each sale
    product_id INTEGER, -- ID of product sold
    customer_id INTEGER,  -- ID of customer who made purchase
    salesperson_id INTEGER, -- ID of salesperson who made the sale
    sale_date DATE, -- Date the sale occurred
    quantity INTEGER -- Quantity of product sold
    );

    CREATE TABLE product_suppliers (
    supplier_id INTEGER PRIMARY KEY, -- Unique ID for each supplier
    product_id INTEGER, -- Product ID supplied
    supply_price DECIMAL(10,2) -- Unit price charged by supplier
    );

    -- sales.product_id can be joined with products.product_id
    -- sales.customer_id can be joined with customers.customer_id
    -- sales.salesperson_id can be joined with salespeople.salesperson_id
    -- product_suppliers.product_id can be joined with products.product_id
",llama3.2:3b,"[""Given the database schema containing information about products, customers, salespeople, sales transactions, and product suppliers, design a query to identify the top 3 salespeople by total revenue generated from sales of a specific product (identified by its `product_id`) across all sales transactions.  The query should calculate the total revenue for each salesperson based on the quantity sold and the product's price.  The output should display the salesperson's name and their total revenue, sorted in descending order of revenue.  Assume that the specific product's `product_id` is provided as an input parameter.  Utilize appropriate joins and aliases to efficiently retrieve the required data.\n""]"," SELECT DISTINCT s.name ,  CAST(COALESCE(SUM(ps.quantity * p.price),0) AS FLOAT) FROM sales s JOIN products p ON s.product_id = p.product_id JOIN product_suppliers ps ON p.product_id = ps.product_id JOIN customers c ON s.customer_id = c.customer_id JOIN salespeople sp ON s.salesperson_id = sp.salesperson_id WHERE p.product_id = ? GROUP BY s.name ORDER BY CAST(SUM(ps.quantity * p.price) AS FLOAT) DESC LIMIT 3;",7
10,"    
    CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, auto-incremented
    supplier_name VARCHAR(100) NOT NULL, -- Name of the supplier company or entity
    contact_info VARCHAR(100), -- Contact details (e.g., phone, email) of the supplier
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Date and time when the supplier record was created
);

CREATE TABLE drug_category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each drug category, auto-incremented
    category_name VARCHAR(50) NOT NULL -- Name of the drug category (e.g., Antibiotics, Painkillers)
);

CREATE TABLE drug (
    drug_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each drug, auto-incremented
    category_id INT, -- ID of the category this drug belongs to
    drug_name VARCHAR(100) NOT NULL, -- Name of the drug (e.g., Amoxicillin)
    manufacturer VARCHAR(100), -- Name of the company that produces the drug
    price DECIMAL(10,2), -- Price per unit of the drug
    stock INT -- Current stock quantity of the drug in inventory
);

CREATE TABLE pharmacy (
    pharmacy_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each pharmacy, auto-incremented
    pharmacy_name VARCHAR(100) NOT NULL, -- Name of the pharmacy
    location VARCHAR(100), -- Physical location or address of the pharmacy
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Date and time when the pharmacy record was created
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, auto-incremented
    pharmacy_id INT, -- ID of the pharmacy where the employee works
    first_name VARCHAR(50), -- Employee's first name
    last_name VARCHAR(50), -- Employee's last name
    role VARCHAR(50) -- Employee's job role (e.g., Pharmacist, Cashier)
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, auto-incremented
    pharmacy_id INT, -- ID of the pharmacy where the sale occurred
    employee_id INT, -- ID of the employee who made the sale
    sale_date DATE, -- Date the sale took place
    total_amount DECIMAL(10,2) -- Total monetary amount of the sale
);

CREATE TABLE sale_details (
    sale_detail_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale detail entry, auto-incremented
    sale_id INT, -- ID of the sale this detail belongs to
    drug_id INT, -- ID of the drug sold
    quantity INT, -- Number of units of the drug sold
    subtotal DECIMAL(10,2) -- Total cost for this drug in the sale (quantity * price)
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, auto-incremented
    drug_id INT, -- ID of the drug being tracked
    supplier_id INT, -- ID of the supplier providing the drug
    stock_level INT, -- Current stock level of the drug from this supplier
    last_updated DATE -- Date when the stock level was last updated
);

CREATE TABLE prescription (
    prescription_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each prescription, auto-incremented
    sale_id INT, -- ID of the sale associated with this prescription
    doctor_name VARCHAR(100), -- Name of the doctor who issued the prescription
    prescription_date DATE -- Date the prescription was issued
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, auto-incremented
    pharmacy_id INT, -- ID of the pharmacy receiving the feedback
    rating INT CHECK (rating >= 1 AND rating <= 5), -- Customer rating (1 to 5 stars)
    comments TEXT, -- Customer comments or notes
    feedback_date DATE -- Date the feedback was submitted
);",qwen2.5:3b,"[""Design a query to identify the top 5 pharmacies with the highest total revenue generated from sales of antibiotics (drugs belonging to the 'Antibiotics' category) during the last quarter (past 90 days). The query should rank pharmacies based on the sum of the `subtotal` values from the `sale_details` table, joining relevant tables to link sales to drug categories and then to pharmacy information.  Include the pharmacy name, total revenue, and the number of sales contributing to that revenue.\n""]","```sql
SELECT 
    p.pharmacy_name,
    SUM(sd.subtotal) AS total_revenue,
    COUNT(*) AS number_of_sales
FROM 
    pharmacy p
JOIN 
    sale_details sd ON p.pharmacy_id = sd.sale_id
JOIN 
    sales s ON s.sale_id = sd.sale_id
JOIN 
    prescription pr ON s.sale_id = pr.sale_id
JOIN 
    drug d ON d.drug_id = sd.drug_id
JOIN 
    drug_category dc ON dc.category_id = d.category_id
WHERE 
    d.drug_name LIKE '%antibiotics%' AND
    DATE(s.sale_date) >= NOW() - INTERVAL 90 DAY
GROUP BY 
    p.pharmacy_name, p.pharmacy_id
ORDER BY 
    total_revenue DESC
LIMIT 5;
```",6
11,"CREATE TABLE store (
    store_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each store, automatically incremented
    store_name VARCHAR(50) NOT NULL, -- Name of the store
    location VARCHAR(100) -- Physical location or address of the store
);

CREATE TABLE department (
    department_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each department, automatically incremented
    department_name VARCHAR(50) NOT NULL -- Name of the department (e.g., Electronics, Clothing)
);

CREATE TABLE category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product category, automatically incremented
    category_name VARCHAR(50) NOT NULL -- Name of the product category (e.g., TVs, Shirts)
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    category_id INT, -- ID of the category this product belongs to
    product_name VARCHAR(100), -- Name of the product (e.g., ""LED TV 55-inch"")
    price DECIMAL(10,2), -- Price per unit of the product
    FOREIGN KEY (category_id) REFERENCES category(category_id) -- Links to category table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    store_id INT, -- ID of the store where the employee works
    department_id INT, -- ID of the department the employee is assigned to
    first_name VARCHAR(50), -- Employee's first name
    last_name VARCHAR(50), -- Employee's last name
    FOREIGN KEY (store_id) REFERENCES store(store_id), -- Links to store table
    FOREIGN KEY (department_id) REFERENCES department(department_id) -- Links to department table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    email VARCHAR(100) -- Customer's email address
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    store_id INT, -- ID of the store where the sale occurred
    employee_id INT, -- ID of the employee who processed the sale
    customer_id INT, -- ID of the customer who made the purchase
    sale_date DATETIME, -- Date and time when the sale took place
    total_amount DECIMAL(10,2), -- Total monetary amount of the sale
    FOREIGN KEY (store_id) REFERENCES store(store_id), -- Links to store table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id), -- Links to employee table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);

CREATE TABLE sale_items (
    sale_item_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale item, automatically incremented
    sale_id INT, -- ID of the sale this item belongs to
    product_id INT, -- ID of the product sold
    quantity INT, -- Number of units of the product sold
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific product in the sale
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id), -- Links to sales table
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE stock (
    stock_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each stock record, automatically incremented
    product_id INT, -- ID of the product being tracked
    store_id INT, -- ID of the store holding this stock
    quantity INT, -- Current stock quantity of the product at the store
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (store_id) REFERENCES store(store_id) -- Links to store table
);






-- product.category_id can be joined with category.category_id -- Connects each product to its category.
-- employee.store_id can be joined with store.store_id -- Associates employees with the store they work at.
-- employee.department_id can be joined with department.department_id -- Links employees to their assigned department.
-- sales.store_id can be joined with store.store_id -- Ties sales to the store where they occurred.
-- sales.employee_id can be joined with employee.employee_id -- Connects sales to the employee who processed them.
-- sales.customer_id can be joined with customer.customer_id -- Links sales to the customer who made the purchase.
-- sale_items.sale_id can be joined with sales.sale_id -- Associates sale items with their corresponding sale.
-- sale_items.product_id can be joined with product.product_id -- Connects sale items to the specific product sold.
-- stock.product_id can be joined with product.product_id -- Ties stock records to the products they track.
-- stock.store_id can be joined with store.store_id -- Links stock records to the store holding the inventory.",qwen2.5:3b,"['   Develop a SQL query to identify the top 5 product categories by total revenue generated across all sales. The query should calculate the total revenue for each category based on the `sale_items` table, joining it with the `sales` and `product` tables. The result should display the category name and the total revenue, sorted in descending order of revenue. Include appropriate aliases for clarity and efficiency.  \n']","```sql
SELECT 
    c.category_name AS Category_Name,
    CAST(SUM(si.subtotal) AS DECIMAL(10, 2)) / COUNT(*) AS Total_Revenue
FROM 
    category c
JOIN 
    product p ON c.category_id = p.category_id
JOIN 
    sale_items si ON p.product_id = si.product_id
JOIN 
    sales s ON si.sale_id = s.sale_id
GROUP BY 
    c.category_name
ORDER BY 
    Total_Revenue DESC
LIMIT 5;
```",6
12,"CREATE TABLE user (
    user_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each user, automatically incremented
    username VARCHAR(50) UNIQUE, -- Unique username chosen by the user
    email VARCHAR(100), -- User's email address
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Date and time when the user account was created
);

CREATE TABLE category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product category, automatically incremented
    category_name VARCHAR(50) -- Name of the product category (e.g., Electronics, Clothing)
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    category_id INT, -- ID of the category this product belongs to
    product_name VARCHAR(100), -- Name of the product (e.g., ""Wireless Mouse"")
    price DECIMAL(10,2), -- Price per unit of the product
    stock INT -- Current stock quantity of the product
    FOREIGN KEY (category_id) REFERENCES category(category_id) -- Links to category table
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    user_id INT, -- ID of the user who placed the order
    order_date DATETIME, -- Date and time when the order was placed
    status ENUM('PENDING', 'SHIPPED', 'DELIVERED'), -- Current status of the order
    total_amount DECIMAL(10,2), -- Total monetary amount of the order
    FOREIGN KEY (user_id) REFERENCES user(user_id) -- Links to user table
);

CREATE TABLE order_item (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order item, automatically incremented
    order_id INT, -- ID of the order this item belongs to
    product_id INT, -- ID of the product ordered
    quantity INT, -- Number of units of the product ordered
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific product in the order
    FOREIGN KEY (order_id) REFERENCES order_(order_id), -- Links to order_ table
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE payment (
    payment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each payment, automatically incremented
    order_id INT, -- ID of the order associated with this payment
    amount DECIMAL(10,2), -- Amount paid for the order
    payment_date DATETIME, -- Date and time when the payment was made
    method ENUM('CARD', 'PAYPAL', 'COD'), -- Payment method used (Credit Card, PayPal, Cash on Delivery)
    FOREIGN KEY (order_id) REFERENCES order_(order_id) -- Links to order_ table
);

CREATE TABLE shipping (
    shipping_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each shipping record, automatically incremented
    order_id INT, -- ID of the order being shipped
    shipping_date DATE, -- Date when the order was shipped
    tracking_number VARCHAR(50), -- Tracking number for the shipment
    FOREIGN KEY (order_id) REFERENCES order_(order_id) -- Links to order_ table
);

CREATE TABLE review (
    review_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each review, automatically incremented
    product_id INT, -- ID of the product being reviewed
    user_id INT, -- ID of the user who wrote the review
    rating INT, -- Rating given by the user (e.g., 1 to 5)
    comment TEXT, -- Text comment or feedback about the product
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (user_id) REFERENCES user(user_id) -- Links to user table
);



-- product.category_id can be joined with category.category_id -- Connects each product to its category.
-- order_.user_id can be joined with user.user_id -- Ties orders to the user who placed them.
-- order_item.order_id can be joined with order_.order_id -- Links order items to their corresponding order.
-- order_item.product_id can be joined with product.product_id -- Connects order items to the specific product ordered.
-- payment.order_id can be joined with order_.order_id -- Associates payments with the order they cover.
-- shipping.order_id can be joined with order_.order_id -- Links shipping records to the order being shipped.
-- review.product_id can be joined with product.product_id -- Ties reviews to the product being reviewed.
-- review.user_id can be joined with user.user_id -- Connects reviews to the user who wrote them.",qwen2.5:3b,"['Generate a SQL query to determine the average order value for each product category, including the category name and the average total amount of all orders containing products from that category.  Present the results sorted in descending order of the average order value. Use appropriate aliases to enhance readability.\n']","```sql
SELECT 
    c.category_name,
    AVG(o.total_amount) AS average_order_value
FROM 
    category c
JOIN 
    product p ON c.category_id = p.category_id
JOIN 
    order_item oi ON p.product_id = oi.product_id
JOIN 
    order_ o ON oi.order_id = o.order_id
GROUP BY 
    c.category_name
ORDER BY 
    AVG(o.total_amount) DESC;
```",8
13,"CREATE TABLE agent (
    agent_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each agent, automatically incremented
    first_name VARCHAR(50), -- Agent's first name
    last_name VARCHAR(50), -- Agent's last name
    phone VARCHAR(20) -- Agent's phone number
);

CREATE TABLE property_type (
    type_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each property type, automatically incremented
    type_name VARCHAR(50) NOT NULL -- Name of the property type (e.g., House, Apartment)
);

CREATE TABLE property (
    property_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each property, automatically incremented
    type_id INT, -- ID of the property type this property belongs to
    address TEXT, -- Full address of the property
    price DECIMAL(12,2), -- Listed price of the property
    status ENUM('AVAILABLE', 'SOLD', 'PENDING'), -- Current status of the property
    FOREIGN KEY (type_id) REFERENCES property_type(type_id) -- Links to property_type table
);

CREATE TABLE client (
    client_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each client, automatically incremented
    first_name VARCHAR(50), -- Client's first name
    last_name VARCHAR(50), -- Client's last name
    email VARCHAR(100) -- Client's email address
);

CREATE TABLE sale (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    property_id INT, -- ID of the property sold
    agent_id INT, -- ID of the agent who facilitated the sale
    client_id INT, -- ID of the client who purchased the property
    sale_date DATE, -- Date when the sale was completed
    sale_price DECIMAL(12,2), -- Final sale price of the property
    FOREIGN KEY (property_id) REFERENCES property(property_id), -- Links to property table
    FOREIGN KEY (agent_id) REFERENCES agent(agent_id), -- Links to agent table
    FOREIGN KEY (client_id) REFERENCES client(client_id) -- Links to client table
);

CREATE TABLE commission (
    commission_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each commission record, automatically incremented
    sale_id INT, -- ID of the sale this commission is tied to
    agent_id INT, -- ID of the agent receiving the commission
    amount DECIMAL(10,2), -- Commission amount earned by the agent
    FOREIGN KEY (sale_id) REFERENCES sale(sale_id), -- Links to sale table
    FOREIGN KEY (agent_id) REFERENCES agent(agent_id) -- Links to agent table
);

CREATE TABLE appointment (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each appointment, automatically incremented
    agent_id INT, -- ID of the agent conducting the appointment
    client_id INT, -- ID of the client attending the appointment
    property_id INT, -- ID of the property being shown or discussed
    appointment_date DATETIME, -- Date and time of the appointment
    FOREIGN KEY (agent_id) REFERENCES agent(agent_id), -- Links to agent table
    FOREIGN KEY (client_id) REFERENCES client(client_id), -- Links to client table
    FOREIGN KEY (property_id) REFERENCES property(property_id) -- Links to property table
);

CREATE TABLE expense (
    expense_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each expense record, automatically incremented
    property_id INT, -- ID of the property associated with the expense
    amount DECIMAL(10,2), -- Amount of the expense
    description TEXT, -- Details or reason for the expense (e.g., repairs, marketing)
    expense_date DATE, -- Date when the expense was incurred
    FOREIGN KEY (property_id) REFERENCES property(property_id) -- Links to property table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    client_id INT, -- ID of the client providing the feedback
    rating INT, -- Rating given by the client (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the client
    FOREIGN KEY (client_id) REFERENCES client(client_id) -- Links to client table
);


-- property.type_id can be joined with property_type.type_id -- Connects each property to its type.
-- sale.property_id can be joined with property.property_id -- Ties sales to the property sold.
-- sale.agent_id can be joined with agent.agent_id -- Links sales to the agent who facilitated them.
-- sale.client_id can be joined with client.client_id -- Connects sales to the client who purchased the property.
-- commission.sale_id can be joined with sale.sale_id -- Associates commissions with their corresponding sale.
-- commission.agent_id can be joined with agent.agent_id -- Links commissions to the agent receiving them.
-- appointment.agent_id can be joined with agent.agent_id -- Ties appointments to the agent conducting them.
-- appointment.client_id can be joined with client.client_id -- Connects appointments to the client attending them.
-- appointment.property_id can be joined with property.property_id -- Links appointments to the property being shown.
-- expense.property_id can be joined with property.property_id -- Associates expenses with the property they relate to.
-- feedback.client_id can be joined with client.client_id -- Connects feedback to the client providing it.",qwen2.5:3b,"['  \n   Generate a SQL query to identify all agents who have facilitated sales to clients whose feedback ratings are consistently above 4, and determine the average sale price for properties sold by these agents. Return the agent\'s first name, last name, and the average sale price, sorted in descending order of the average sale price.  Assume that ""consistent"" means at least 3 feedback entries with a rating above 4.\n']","```sql
SELECT 
    a.first_name, 
    a.last_name, 
    AVG(s.sale_price) AS average_sale_price
FROM 
    agent a
JOIN 
    sale s ON a.agent_id = s.agent_id
WHERE 
    s.client_id IN (
        SELECT f.client_id
        FROM feedback f
        JOIN (
            SELECT client_id, COUNT(*) AS rating_count
            FROM feedback
            GROUP BY client_id, DATE_FORMAT(feedback_date, '%Y-%m')
            HAVING COUNT(*) >= 3 AND AVG(CAST(rating AS FLOAT)) > 4.0
        ) fb ON f.client_id = fb.client_id AND f.feedback_date BETWEEN fb.DATEDIFF(f.feedback_date, '2000-1-1', 'YEAR') * 365 + (DATEDIFF(fb.DATEDIFF(fb.DATEDIFF(f.feedback_date, '2000-1-1', 'DAY')) - 1) / 365)
GROUP BY 
    s.client_id
HAVING 
    COUNT(*) >= 3 AND AVG(CAST(f.rating AS FLOAT)) > 4.0
JOIN 
    agent sa ON s.agent_id = sa.agent_id
GROUP BY 
    a.agent_id, a.first_name, a.last_name
ORDER BY 
    average_sale_price DESC;
```",3
14,"CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, automatically incremented
    supplier_name VARCHAR(100), -- Name of the supplier company or entity
    contact VARCHAR(100) -- Contact information for the supplier (e.g., phone, email)
);

CREATE TABLE raw_material (
    material_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each raw material, automatically incremented
    material_name VARCHAR(100), -- Name of the raw material (e.g., Steel, Cotton)
    unit_cost DECIMAL(10,2) -- Cost per unit of the raw material
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    product_name VARCHAR(100), -- Name of the product (e.g., ""Steel Table"")
    sale_price DECIMAL(10,2) -- Price at which the product is sold per unit
);

CREATE TABLE production (
    production_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each production batch, automatically incremented
    product_id INT, -- ID of the product being produced
    production_date DATE, -- Date when the production occurred
    quantity INT, -- Number of units produced in this batch
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    role VARCHAR(50) -- Employee's job role (e.g., Salesperson, Production Worker)
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    product_id INT, -- ID of the product sold
    employee_id INT, -- ID of the employee who made the sale
    sale_date DATE, -- Date when the sale took place
    quantity_sold INT, -- Number of units sold
    total_amount DECIMAL(10,2), -- Total monetary amount of the sale
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, automatically incremented
    material_id INT, -- ID of the raw material being tracked
    stock_level INT, -- Current stock quantity of the raw material
    FOREIGN KEY (material_id) REFERENCES raw_material(material_id) -- Links to raw_material table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    company_name VARCHAR(100), -- Name of the customer company or entity
    contact VARCHAR(100) -- Contact information for the customer (e.g., phone, email)
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    customer_id INT, -- ID of the customer who placed the order
    sale_id INT, -- ID of the sale associated with this order
    order_date DATE, -- Date when the order was placed
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id) -- Links to sales table
);


-- production.product_id can be joined with product.product_id -- Connects production batches to the product being produced.
-- sales.product_id can be joined with product.product_id -- Ties sales to the product sold.
-- sales.employee_id can be joined with employee.employee_id -- Links sales to the employee who made them.
-- inventory.material_id can be joined with raw_material.material_id -- Associates inventory records with the raw materials they track.
-- order_.customer_id can be joined with customer.customer_id -- Connects orders to the customer who placed them.
-- order_.sale_id can be joined with sales.sale_id -- Links orders to their corresponding sale.",qwen2.5:3b,"['Design a SQL query to identify the top 3 product categories (defined by product names) that have experienced the highest total sales revenue over the last 12 months, considering both the sale price and the quantity sold.  Your query must utilize multiple joins and aliases to efficiently retrieve this information.  The query should rank products based on total revenue, and return the product names and their corresponding total revenue for the top 3.  Assume the current date is used for filtering sales data within the last 12 months.\n']","```sql
WITH SalesDetail AS (
    SELECT 
        s.product_id,
        p.product_name,
        SUM(s.quantity_sold * s.total_amount) AS total_revenue
    FROM 
        sales s
    JOIN 
        product p ON s.product_id = p.product_id
    WHERE 
        s.sale_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)
    GROUP BY 
        s.product_id, p.product_name
), RankedProducts AS (
    SELECT 
        sd.product_id,
        sd.product_name,
        sd.total_revenue,
        RANK() OVER (ORDER BY sd.total_revenue DESC) AS revenue_rank
    FROM 
        SalesDetail sd
)
SELECT 
    product_id, 
    product_name, 
    total_revenue
FROM 
    RankedProducts rp
WHERE 
    rp.revenue_rank <= 3;
```",9
15,"CREATE TABLE restaurant (
    restaurant_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each restaurant, automatically incremented
    name VARCHAR(100), -- Name of the restaurant
    location VARCHAR(100) -- Physical location or address of the restaurant
);

CREATE TABLE menu_category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each menu category, automatically incremented
    category_name VARCHAR(50) -- Name of the menu category (e.g., Appetizers, Desserts)
);

CREATE TABLE menu_item (
    item_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each menu item, automatically incremented
    category_id INT, -- ID of the category this menu item belongs to
    item_name VARCHAR(100), -- Name of the menu item (e.g., ""Chicken Wings"")
    price DECIMAL(10,2), -- Price of the menu item
    FOREIGN KEY (category_id) REFERENCES menu_category(category_id) -- Links to menu_category table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    restaurant_id INT, -- ID of the restaurant where the employee works
    first_name VARCHAR(50), -- Employee's first name
    role VARCHAR(50) -- Employee's job role (e.g., Waiter, Chef)
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(restaurant_id) -- Links to restaurant table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    email VARCHAR(100) -- Customer's email address
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    restaurant_id INT, -- ID of the restaurant where the order was placed
    employee_id INT, -- ID of the employee who processed the order
    customer_id INT, -- ID of the customer who placed the order
    order_date DATETIME, -- Date and time when the order was placed
    total_amount DECIMAL(10,2), -- Total monetary amount of the order
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(restaurant_id), -- Links to restaurant table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id), -- Links to employee table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);

CREATE TABLE order_detail (
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order detail, automatically incremented
    order_id INT, -- ID of the order this detail belongs to
    item_id INT, -- ID of the menu item ordered
    quantity INT, -- Number of units of the menu item ordered
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific menu item in the order
    FOREIGN KEY (order_id) REFERENCES order_(order_id), -- Links to order_ table
    FOREIGN KEY (item_id) REFERENCES menu_item(item_id) -- Links to menu_item table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    customer_id INT, -- ID of the customer providing the feedback
    restaurant_id INT, -- ID of the restaurant being reviewed
    rating INT, -- Rating given by the customer (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (restaurant_id) REFERENCES restaurant(restaurant_id) -- Links to restaurant table
);


-- menu_item.category_id can be joined with menu_category.category_id -- Connects each menu item to its category.
-- employee.restaurant_id can be joined with restaurant.restaurant_id -- Ties employees to the restaurant they work at.
-- order_.restaurant_id can be joined with restaurant.restaurant_id -- Links orders to the restaurant where they were placed.
-- order_.employee_id can be joined with employee.employee_id -- Connects orders to the employee who processed them.
-- order_.customer_id can be joined with customer.customer_id -- Associates orders with the customer who placed them.
-- order_detail.order_id can be joined with order_.order_id -- Ties order details to their corresponding order.
-- order_detail.item_id can be joined with menu_item.item_id -- Links order details to the specific menu item ordered.
-- feedback.customer_id can be joined with customer.customer_id -- Connects feedback to the customer providing it.
-- feedback.restaurant_id can be joined with restaurant.restaurant_id -- Associates feedback with the restaurant being reviewed.",qwen2.5:3b,"['  Develop a SQL query to identify all restaurants that have received at least five negative feedback entries (rating of 1 or 2) within the last 30 days. Your query must utilize joins between the `feedback` and `restaurant` tables, along with appropriate filtering and aggregation.  Include aliases for all tables used in your query.\n']","```sql
SELECT r.name AS restaurant_name, COUNT(f.feedback_id) AS negative_feedback_count
FROM restaurant r
JOIN feedback f ON r.restaurant_id = f.restaurant_id
WHERE f.rating IN (1, 2)
AND f.feedback_id IN (
    SELECT feedback_id
    FROM feedback
    WHERE timestampdiff(NOW(), feedback_date, 'd') <= 30
    GROUP BY feedback_id
    HAVING COUNT(*) >= 5
)
GROUP BY r.restaurant_id
HAVING negative_feedback_count >= 5;
```",6
16,"CREATE TABLE vehicle_type (
    type_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each vehicle type, automatically incremented
    type_name VARCHAR(50) -- Name of the vehicle type (e.g., Sedan, Truck)
);

CREATE TABLE vehicle (
    vehicle_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each vehicle, automatically incremented
    type_id INT, -- ID of the vehicle type this vehicle belongs to
    model VARCHAR(100), -- Model name of the vehicle (e.g., ""Camry"")
    manufacturer VARCHAR(50), -- Name of the vehicle manufacturer (e.g., ""Toyota"")
    price DECIMAL(12,2), -- Price of the vehicle
    stock INT, -- Current stock quantity of the vehicle
    FOREIGN KEY (type_id) REFERENCES vehicle_type(type_id) -- Links to vehicle_type table
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    last_name VARCHAR(50), -- Customer's last name
    email VARCHAR(100) -- Customer's email address
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    last_name VARCHAR(50), -- Employee's last name
    role VARCHAR(50) -- Employee's job role (e.g., Salesperson, Mechanic)
);

CREATE TABLE sale (
    sale_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each sale, automatically incremented
    vehicle_id INT, -- ID of the vehicle sold
    customer_id INT, -- ID of the customer who purchased the vehicle
    employee_id INT, -- ID of the employee who facilitated the sale
    sale_date DATE, -- Date when the sale occurred
    sale_price DECIMAL(12,2), -- Final sale price of the vehicle
    FOREIGN KEY (vehicle_id) REFERENCES vehicle(vehicle_id), -- Links to vehicle table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE service (
    service_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each service record, automatically incremented
    vehicle_id INT, -- ID of the vehicle being serviced
    customer_id INT, -- ID of the customer requesting the service
    service_date DATE, -- Date when the service was performed
    cost DECIMAL(10,2), -- Cost of the service
    FOREIGN KEY (vehicle_id) REFERENCES vehicle(vehicle_id), -- Links to vehicle table
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);

CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, automatically incremented
    supplier_name VARCHAR(100), -- Name of the supplier company or entity
    contact VARCHAR(100) -- Contact information for the supplier (e.g., phone, email)
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, automatically incremented
    vehicle_id INT, -- ID of the vehicle being tracked
    supplier_id INT, -- ID of the supplier providing the vehicle
    stock_level INT, -- Current stock level of the vehicle
    FOREIGN KEY (vehicle_id) REFERENCES vehicle(vehicle_id), -- Links to vehicle table
    FOREIGN KEY (supplier_id) REFERENCES supplier(supplier_id) -- Links to supplier table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    customer_id INT, -- ID of the customer providing the feedback
    rating INT, -- Rating given by the customer (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);




-- vehicle.type_id can be joined with vehicle_type.type_id -- Connects each vehicle to its type.
-- sale.vehicle_id can be joined with vehicle.vehicle_id -- Ties sales to the vehicle sold.
-- sale.customer_id can be joined with customer.customer_id -- Links sales to the customer who purchased the vehicle.
-- sale.employee_id can be joined with employee.employee_id -- Associates sales with the employee who facilitated them.
-- service.vehicle_id can be joined with vehicle.vehicle_id -- Connects service records to the vehicle being serviced.
-- service.customer_id can be joined with customer.customer_id -- Links service records to the customer requesting them.
-- inventory.vehicle_id can be joined with vehicle.vehicle_id -- Ties inventory records to the vehicle being tracked.
-- inventory.supplier_id can be joined with supplier.supplier_id -- Associates inventory with the supplier providing the vehicle.
-- feedback.customer_id can be joined with customer.customer_id -- Connects feedback to the customer providing it.-- ",qwen2.5:3b,"[""  \n   Develop a SQL query to identify all customers who have purchased vehicles of a specific type (e.g., 'Sedan') and have subsequently received at least one service for that same vehicle. Return the customer's first name, last name, and the total number of services they have received for vehicles of that type.  Use appropriate aliases to enhance readability and ensure the query accurately reflects the desired outcome.  The query should include a `GROUP BY` clause to aggregate the service counts.\n""]","```sql
SELECT 
    c.first_name, 
    c.last_name,
    COUNT(s.service_id) AS total_services_received
FROM 
    customer c
JOIN 
    sale s ON c.customer_id = s.customer_id
JOIN 
    vehicle v ON s.vehicle_id = v.vehicle_id
JOIN 
    service ON v.vehicle_id = service.vehicle_id AND c.customer_id = service.customer_id
WHERE 
    v.type_id IN (
        SELECT vt.type_id
        FROM 
            vehicle_type vt
        JOIN 
            vehicle v2 ON vt.type_id = v2.type_id
        WHERE 
            vt.type_name = 'Sedan'
    )
GROUP BY 
    c.first_name, c.last_name
HAVING 
    COUNT(s.service_id) > 0;
```",7
17,"CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    first_name VARCHAR(50), -- Customer's first name
    email VARCHAR(100) UNIQUE -- Customer's unique email address
);

CREATE TABLE plan (
    plan_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each subscription plan, automatically incremented
    plan_name VARCHAR(50), -- Name of the plan (e.g., ""Basic"", ""Premium"")
    monthly_price DECIMAL(10,2) -- Monthly cost of the plan
);

CREATE TABLE subscription (
    subscription_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each subscription, automatically incremented
    customer_id INT, -- ID of the customer who subscribed
    plan_id INT, -- ID of the plan subscribed to
    start_date DATE, -- Date when the subscription began
    end_date DATE, -- Date when the subscription ends (if applicable)
    status ENUM('ACTIVE', 'CANCELLED'), -- Current status of the subscription
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (plan_id) REFERENCES plan(plan_id) -- Links to plan table
);

CREATE TABLE payment (
    payment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each payment, automatically incremented
    subscription_id INT, -- ID of the subscription this payment is for
    amount DECIMAL(10,2), -- Amount paid
    payment_date DATE, -- Date when the payment was made
    method ENUM('CARD', 'PAYPAL', 'BANK'), -- Payment method used (Credit Card, PayPal, Bank Transfer)
    FOREIGN KEY (subscription_id) REFERENCES subscription(subscription_id) -- Links to subscription table
);

CREATE TABLE usage (
    usage_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each usage record, automatically incremented
    subscription_id INT, -- ID of the subscription this usage pertains to
    usage_date DATE, -- Date when the usage was recorded
    metric_value INT, -- Measured value of usage (e.g., data in MB, minutes used)
    FOREIGN KEY (subscription_id) REFERENCES subscription(subscription_id) -- Links to subscription table
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    role VARCHAR(50) -- Employee's job role (e.g., Support Agent, Manager)
);

CREATE TABLE support_ticket (
    ticket_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each support ticket, automatically incremented
    customer_id INT, -- ID of the customer who raised the ticket
    employee_id INT, -- ID of the employee handling the ticket
    issue TEXT, -- Description of the customer's issue
    status ENUM('OPEN', 'CLOSED'), -- Current status of the ticket
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each feedback entry, automatically incremented
    customer_id INT, -- ID of the customer providing the feedback
    rating INT, -- Rating given by the customer (e.g., 1 to 5)
    comments TEXT, -- Additional comments or notes from the customer
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id) -- Links to customer table
);



-- subscription.customer_id can be joined with customer.customer_id -- Connects subscriptions to the customer who subscribed.
-- subscription.plan_id can be joined with plan.plan_id -- Links subscriptions to the specific plan subscribed to.
-- payment.subscription_id can be joined with subscription.subscription_id -- Ties payments to their corresponding subscription.
-- usage.subscription_id can be joined with subscription.subscription_id -- Associates usage records with the subscription they pertain to.
-- support_ticket.customer_id can be joined with customer.customer_id -- Links support tickets to the customer who raised them.
-- support_ticket.employee_id can be joined with employee.employee_id -- Connects support tickets to the employee handling them.
-- feedback.customer_id can be joined with customer.customer_id -- Ties feedback to the customer providing it.-- ",qwen2.5:3b,"['  \n   Develop a SQL query to identify the top 5 customers who have both subscribed to a ""Premium"" plan and have at least one open support ticket. Your query must utilize multiple joins and aliases to effectively combine data from the `customer`, `subscription`, `support_ticket`, and `plan` tables.  The result set should display the customer\'s first name, email, and the number of open support tickets they have.  Ensure the query returns only the top 5 customers based on the total number of open support tickets.\n']","```sql
WITH CustomerWithTickets AS (
    SELECT 
        c.customer_id,
        c.first_name,
        c.email,
        COUNT(s.ticket_id) as open_ticket_count
    FROM customer c
    LEFT JOIN subscription s ON c.customer_id = s.customer_id
    LEFT JOIN plan p ON s.plan_id = p.plan_id
    LEFT JOIN support_ticket t ON s.subscription_id = t.subscription_id
    WHERE p.plan_name = 'Premium'
    GROUP BY c.customer_id, c.first_name, c.email
),
RankedCustomers AS (
    SELECT 
        cwct.customer_id,
        cwct.first_name,
        cwct.email,
        cwct.open_ticket_count,
        RANK() OVER (ORDER BY cwct.open_ticket_count DESC) as customer_rank
    FROM CustomerWithTickets cwct
)
SELECT 
    rcwct.customer_id,
    rcwct.first_name,
    rcwct.email,
    rcwct.open_ticket_count
FROM RankedCustomers rcwct
WHERE rcwct.customer_rank <= 5
ORDER BY rcwct.open_ticket_count DESC;
```",8
18,"CREATE TABLE warehouse (
    warehouse_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each warehouse, automatically incremented
    location VARCHAR(100), -- Physical location or address of the warehouse
    capacity INT -- Maximum storage capacity of the warehouse (e.g., in units or volume)
);

CREATE TABLE product_category (
    category_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product category, automatically incremented
    category_name VARCHAR(50) -- Name of the product category (e.g., Electronics, Furniture)
);

CREATE TABLE product (
    product_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each product, automatically incremented
    category_id INT, -- ID of the category this product belongs to
    product_name VARCHAR(100), -- Name of the product (e.g., ""LED TV"")
    wholesale_price DECIMAL(10,2), -- Wholesale price per unit of the product
    FOREIGN KEY (category_id) REFERENCES product_category(category_id) -- Links to product_category table
);

CREATE TABLE supplier (
    supplier_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each supplier, automatically incremented
    supplier_name VARCHAR(100), -- Name of the supplier company or entity
    contact VARCHAR(100) -- Contact information for the supplier (e.g., phone, email)
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each customer, automatically incremented
    company_name VARCHAR(100), -- Name of the customer company or entity
    contact VARCHAR(100) -- Contact information for the customer (e.g., phone, email)
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each employee, automatically incremented
    first_name VARCHAR(50), -- Employee's first name
    warehouse_id INT, -- ID of the warehouse where the employee works
    role VARCHAR(50), -- Employee's job role (e.g., Warehouse Manager, Order Picker)
    FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id) -- Links to warehouse table
);

CREATE TABLE order_ (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order, automatically incremented
    customer_id INT, -- ID of the customer who placed the order
    warehouse_id INT, -- ID of the warehouse fulfilling the order
    employee_id INT, -- ID of the employee who processed the order
    order_date DATE, -- Date when the order was placed
    total_amount DECIMAL(10,2), -- Total monetary amount of the order
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id), -- Links to customer table
    FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id), -- Links to warehouse table
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id) -- Links to employee table
);

CREATE TABLE order_detail (
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each order detail, automatically incremented
    order_id INT, -- ID of the order this detail belongs to
    product_id INT, -- ID of the product ordered
    quantity INT, -- Number of units of the product ordered
    subtotal DECIMAL(10,2), -- Subtotal amount for this specific product in the order
    FOREIGN KEY (order_id) REFERENCES order_(order_id), -- Links to order_ table
    FOREIGN KEY (product_id) REFERENCES product(product_id) -- Links to product table
);

CREATE TABLE inventory (
    inventory_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each inventory record, automatically incremented
    product_id INT, -- ID of the product being tracked
    warehouse_id INT, -- ID of the warehouse storing the product
    supplier_id INT, -- ID of the supplier providing the product
    stock_level INT, -- Current stock quantity of the product in the warehouse
    FOREIGN KEY (product_id) REFERENCES product(product_id), -- Links to product table
    FOREIGN KEY (warehouse_id) REFERENCES warehouse(warehouse_id), -- Links to warehouse table
    FOREIGN KEY (supplier_id) REFERENCES supplier(supplier_id) -- Links to supplier table
);

CREATE TABLE shipment (
    shipment_id INT PRIMARY KEY AUTO_INCREMENT, -- Unique ID for each shipment, automatically incremented
    order_id INT, -- ID of the order being shipped
    shipment_date DATE, -- Date when the shipment was sent
    tracking_number VARCHAR(50), -- Tracking number for the shipment
    FOREIGN KEY (order_id) REFERENCES order_(order_id) -- Links to order_ table
);




-- product.category_id can be joined with product_category.category_id -- Connects each product to its category.
-- employee.warehouse_id can be joined with warehouse.warehouse_id -- Ties employees to the warehouse they work at.
-- order_.customer_id can be joined with customer.customer_id -- Links orders to the customer who placed them.
-- order_.warehouse_id can be joined with warehouse.warehouse_id -- Associates orders with the warehouse fulfilling them.
-- order_.employee_id can be joined with employee.employee_id -- Connects orders to the employee who processed them.
-- order_detail.order_id can be joined with order_.order_id -- Ties order details to their corresponding order.
-- order_detail.product_id can be joined with product.product_id -- Links order details to the specific product ordered.
-- inventory.product_id can be joined with product.product_id -- Associates inventory records with the product being tracked.
-- inventory.warehouse_id can be joined with warehouse.warehouse_id -- Connects inventory to the warehouse storing it.
-- inventory.supplier_id can be joined with supplier.supplier_id -- Links inventory to the supplier providing the product.
-- shipment.order_id can be joined with order_.order_id -- Ties shipments to the order being shipped.-- ",qwen2.5:3b,"[""  Develop a SQL query to identify all products that have been ordered more than 5 times and are currently stocked in warehouses located in 'New York'. Return the product names and the total quantity ordered for each product.  Include the warehouse location for each product's stock.  Utilize appropriate joins and aliases to efficiently retrieve the required information.\n""]","```sql
SELECT p.product_name, SUM(od.quantity) AS total_quantity_ordered, w.location AS warehouse_location
FROM product p
JOIN order_detail od ON p.product_id = od.product_id
JOIN order_ o ON od.order_id = o.order_id
JOIN inventory i ON p.product_id = i.product_id AND o.warehouse_id = i.warehouse_id
WHERE o.customer_id IN (
    SELECT customer_id 
    FROM order_
    WHERE warehouse_id IN (
        SELECT warehouse_id 
        FROM warehouse 
        WHERE location = 'New York'
    )
    GROUP BY customer_id
    HAVING COUNT(order_id) > 5
)
GROUP BY p.product_name, w.location
HAVING total_quantity_ordered > 0;
```",5
19,"    CREATE TABLE products (
    product_id INTEGER PRIMARY KEY, -- Unique ID for each product
    name VARCHAR(50), -- Name of the product
    price DECIMAL(10,2), -- Price of each unit of the product
    quantity INTEGER  -- Current quantity in stock
    );

    CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY, -- Unique ID for each customer
    name VARCHAR(50), -- Name of the customer
    address VARCHAR(100) -- Mailing address of the customer
    );

    CREATE TABLE salespeople (
    salesperson_id INTEGER PRIMARY KEY, -- Unique ID for each salesperson
    name VARCHAR(50), -- Name of the salesperson
    region VARCHAR(50) -- Geographic sales region
    );

    CREATE TABLE sales (
    sale_id INTEGER PRIMARY KEY, -- Unique ID for each sale
    product_id INTEGER, -- ID of product sold
    customer_id INTEGER,  -- ID of customer who made purchase
    salesperson_id INTEGER, -- ID of salesperson who made the sale
    sale_date DATE, -- Date the sale occurred
    quantity INTEGER -- Quantity of product sold
    );

    CREATE TABLE product_suppliers (
    supplier_id INTEGER PRIMARY KEY, -- Unique ID for each supplier
    product_id INTEGER, -- Product ID supplied
    supply_price DECIMAL(10,2) -- Unit price charged by supplier
    );

    -- sales.product_id can be joined with products.product_id
    -- sales.customer_id can be joined with customers.customer_id
    -- sales.salesperson_id can be joined with salespeople.salesperson_id
    -- product_suppliers.product_id can be joined with products.product_id
",qwen2.5:3b,"[""Given the database schema containing information about products, customers, salespeople, sales transactions, and product suppliers, design a query to identify the top 3 salespeople by total revenue generated from sales of a specific product (identified by its `product_id`) across all sales transactions.  The query should calculate the total revenue for each salesperson based on the quantity sold and the product's price.  The output should display the salesperson's name and their total revenue, sorted in descending order of revenue.  Assume that the specific product's `product_id` is provided as an input parameter.  Utilize appropriate joins and aliases to efficiently retrieve the required data.\n""]","```sql
WITH ProductPrice AS (
    SELECT p.product_id, p.price
    FROM products p
    WHERE p.product_id = CAST(? AS INTEGER) -- Assuming ? is a parameter for product_id
),
SalesDetails AS (
    SELECT s.salesperson_id, s.product_id, s.customer_id, s.salesperson_id, 
           s.sale_date, s.quantity,
           pp.price * s.quantity AS total_revenue
    FROM sales s
    JOIN ProductPrice pp ON s.product_id = pp.product_id
)
SELECT sd.salesperson_id, sp.name AS salesperson_name, SUM(sd.total_revenue) AS total_revenue
FROM SalesDetails sd
JOIN salespeople sp ON sd.salesperson_id = sp.salesperson_id
GROUP BY sd.salesperson_id, sp.name
ORDER BY total_revenue DESC
LIMIT 3;
```",9
